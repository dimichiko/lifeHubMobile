// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

/// @seed="npx tsx prisma/seed.ts"

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  timezone  String?
  theme     String?
  language  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  habits    Habit[]
  habitLogs HabitLog[]
  sessions  Session[]

  @@map("User")
}

model Habit {
  id         String    @id @default(cuid())
  userId     String
  name       String
  frequency  String
  reminderAt DateTime?
  archived   Boolean   @default(false)
  goal       Int?
  createdAt  DateTime  @default(now())

  user     User       @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  habitLogs HabitLog[]

  @@map("Habit")
}

model HabitLog {
  id         String   @id @default(cuid())
  userId     String
  habitId    String
  date       DateTime
  note       String?
  mood       String?
  energyLevel Int?

  user  User  @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  habit Habit @relation(fields: [habitId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([userId, habitId, date])
  @@map("HabitLog")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("Session")
} 